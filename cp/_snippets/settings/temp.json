// Pair
"// ---------Pair----------",
"typedef pair<int, int> pii;",
"",
// Vector
"// ----------Vector----------",
"typedef vector<int> vi;",
"typedef vector<pii> vpii;",
"#define vvc vector<vector<char>>",
"#define vvi vector<vector<int>>",
"",
// Map
"// ----------Map----------",
"typedef unordered_map<int, int> umpii;",
"typedef unordered_map<char, int> umpci;",
"typedef map<int, int> mpi;",
"typedef map<char, int> mpci;",
"",
// set
"// ----------Set----------",
"typedef unordered_set<char> usetc;",
"typedef unordered_set<int> useti;",
"typedef set<char> oset;",
"typedef set<int> oseti;",
"",
// Macro Definition:
"// ! Macro Definition:",
"//^ #define fori(i, n) for (int i = 0; i < n; i++)",
"#define fori(start, end) \\",
"int nn = (end);             \\",
"for (int i = (start); i < nn; i++)",
"//^ #define forj(j, n) for (int j = 0; j < n; j++)",
"#define forj(start, end) \\",
"int nn = (end);             \\",
"for (int j = (start); j < nn; j++)",
"//^ #define fork(k, n) for (int k = 0; k < n; k++)",
"#define fork(start, end) \\",
"int nn = (end);             \\",
"for (int k = (start); k < nn; k++)",
"",
// Debugger
// ----------------------------------------
// ----------------------------------------
"// @ Debugger",
"bool is_debug_enabled = true; // Global variable to control debugging",
"",
"#define DEBUG",
"",
"#ifdef DEBUG",
"#define dbg(...) if (is_debug_enabled) debug_helper(#__VA_ARGS__, __VA_ARGS__)",
"#else",
"#define dbg(...)",
"#endif",
"",
// Convert various types to string
"// % Convert various types to string",
"template <typename T>",
"string to_string(T val)",
"{",
"    ostringstream oss;",
"    oss << val;",
"    return oss.str();",
"}",
"",
// Helper function to pair variable names with their values
"// % Helper function to pair variable names with their values",
"template <typename T>",
"string pair_name_value(const char *name, T &&value)",
"{",
"    return string(name) + \" = \" + to_string(forward<T>(value));",
"}",
"",
"template <typename... Args>",
"void debug_helper(const char *names, Args &&...args)",
"{",
"    stringstream ss(names);",
"    string name;",
"    size_t i = 0;",
"    vector<string> tokens;",
"    int balance = 0;",
"    string token, temp;",
"    while (getline(ss, token, ','))",
"    {",
"        temp += token;",
"        for (char ch : token)",
"        {",
"            if (ch == '(')",
"                balance++;",
"            else if (ch == ')')",
"                balance--;",
"        }",
"",
"        if (balance == 0)",
"        {",
"            tokens.push_back(temp);",
"            temp.clear();",
"        }",
"        else",
"        {",
"            temp += \",\"; ",
"        }",
"    }",
"    cerr << \"[\";",
"     size_t j = 0;",
"     ((cerr << tokens[j++] << \" = \" << to_string(args) << (j < sizeof...(args) ? \",\": \"\")), ...);",
"     cerr << \"]\" << endl;",
"}",
"",
"",
// BinarySearch - find last index of target O(logN",
"// --upperBound & check if equal to target",
"int BinarySearch(vector<int> a, int target)",
"{",
"    int left = 0, right = a.size() - 1;",
"    while (left < right)",
"    {",
"        int mid = left + (right - left + 1 ) / 2; //ceil & avoid overflow",
"        if (a[mid] <= target)",
"            left = mid;",
"        if (a[mid] > target)",
"            right = mid - 1;",
"    }",
"    // left & right are equal",
"    return (a[left] == target) ? left : -1; // -1 -> not exist",
"}",
"",
// BinarySearch-finds the "first" index of target
"// BinarySearch - finds the first index of target O(logN",
"// lowerBound & check if equal to target",
"",
"int BinarySearch(vector<int> a, int target)",
"{",
"    int left = 0, right = a.size() - 1;",
"    while (left < right)",
"    {",
"        int mid = left + (right - left ) / 2; //floor & avoid overflow;",
"        if (a[mid] < target)",
"            left = mid + 1;",
"        if (a[mid] >= target)",
"           right = mid;",
"    }",
"    // left & right are equal",
"    return (a[left] == target) ? left : -1;",
"}",
"".
"".




 
"",
// Adjacency Matrix to LIST Undirected
"// & Adjacency Matrix to LIST Undirected",
"vector<vector<int>> adjMatrixToList(int V,vector<vector<int>> &adjMatrix) {",
"    vector<vector<int>> graph(V); ",
"     fori(0, V) {",
"         forj(0, V) {",
"            if (adjMatrix[i][j] == 1) {",
"                graph[i].push_back(j);",
"                graph[j].push_back(i);",
"            }",
"        }",
"    }",
"    return graph;",
"}",