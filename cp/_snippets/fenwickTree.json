{
    "Fenwick Tree Implementation": {
        "scope": "cpp",
        "prefix": "fenwickTree",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "class FenwickTree {",
            "private:",
            "    vector<int> bit;",
            "    int n;",
            "",
            "public:",
            "    FenwickTree(int size) {",
            "        this->n = size;",
            "        bit.assign(n + 1, 0);  // 1-based indexing",
            "    }",
            "",
            "    // Point update: Add value to index idx",
            "    void pointUpdate(int idx, int value) {",
            "        for (; idx <= n; idx += idx & -idx)",
            "            bit[idx] += value;",
            "    }",
            "",
            "    // Range sum query [1, idx]",
            "    int prefixSum(int idx) {",
            "        int sum = 0;",
            "        for (; idx > 0; idx -= idx & -idx)",
            "            sum += bit[idx];",
            "        return sum;",
            "    }",
            "",
            "    // Range sum query [left, right]",
            "    int rangeSum(int left, int right) {",
            "        return prefixSum(right) - prefixSum(left - 1);",
            "    }",
            "",
            "    // Point update: XOR value at index idx",
            "    void pointUpdateXOR(int idx, int value) {",
            "        for (; idx <= n; idx += idx & -idx)",
            "            bit[idx] ^= value;",
            "    }",
            "",
            "    // Prefix XOR query [1, idx]",
            "    int prefixXOR(int idx) {",
            "        int xorVal = 0;",
            "        for (; idx > 0; idx -= idx & -idx)",
            "            xorVal ^= bit[idx];",
            "        return xorVal;",
            "    }",
            "",
            "    // Range XOR query [left, right]",
            "    int rangeXOR(int left, int right) {",
            "        return prefixXOR(right) ^ prefixXOR(left - 1);",
            "    }",
            "",
            "    // Range update: Add value to all elements in [left, right]",
            "    void rangeUpdate(int left, int right, int value) {",
            "        pointUpdate(left, value);",
            "        pointUpdate(right + 1, -value);",
            "    }",
            "",
            "    // Point query after range update",
            "    int pointQuery(int idx) {",
            "        return prefixSum(idx);",
            "    }",
            "};",
            "",
            "int main() {",
            "    int n;",
            "    cin >> n;",
            "",
            "    FenwickTree fenwick(n);",
            "",
            "    // Example usage",
            "    fenwick.pointUpdate(3, 10); // Add 10 to index 3",
            "    fenwick.pointUpdateXOR(5, 7); // XOR 7 with index 5",
            "",
            "    cout << \"Sum of first 5 elements: \" << fenwick.prefixSum(5) << endl;",
            "    cout << \"Sum of elements from index 2 to 7: \" << fenwick.rangeSum(2, 7) << endl;",
            "    cout << \"XOR of elements from index 1 to 5: \" << fenwick.rangeXOR(1, 5) << endl;",
            "",
            "    fenwick.rangeUpdate(2, 4, 3); // Add 3 to elements in range [2, 4]",
            "    cout << \"Value at index 3 after range update: \" << fenwick.pointQuery(3) << endl;",
            "",
            "    return 0;",
            "}"
        ],
        "description": "C++ Fenwick Tree with various operations like range sum, XOR, etc."
    }
}